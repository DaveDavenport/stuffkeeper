requires 2.0.10

%h{
#include <gtk/gtk.h>
#include <glib/gi18n.h>
#include <glib/gstdio.h>
#include <config.h>
#include "stuffkeeperglue.h"
#include "stuffkeeper-data-backend.h"
#include "stuffkeeper-data-schema.h"
#include "stuffkeeper-data-item.h"

%}

%ph{
#include "stuffkeeper-interface.h"
#define PACKAGE_HTML_TEMPLATE_FULL "/templates/index.template"
#define PACKAGE_HTML_TEMPLATE "/templates/index-item.template"


typedef enum _EscapeType
{
ESCAPE_HTML,
ESCAPE_CSV,
ESCAPE_NONE
}EscapeType;

%}

class Stuffkeeper:Export:HTML from G:Object
{
    private GtkBuilder *xml;
    private StuffkeeperInterface  *interface = {NULL};
    /* Parser values */
    private StuffkeeperDataBackend *skdb = {NULL};
    private StuffkeeperDataItem *cur_item = {NULL};
    private StuffkeeperDataSchema *cur_schema = {NULL};
    private gchar *cur_field = {NULL};
    private gchar *image_path = {NULL};
    private EscapeType etype = {ESCAPE_HTML};
    /** 
     * Widgets 
     */
    private GtkWidget *fc_template = {NULL};
    private GtkWidget *cb_type = {NULL};
    private GtkWidget *chk_cdb = {NULL};
    private GtkWidget *chk_vis = {NULL};
    private GtkWidget  *button_export = {NULL};
    private GtkWidget *progress_bar = {NULL};

    private GtkFileFilter *ffilter = {gtk_file_filter_new()};

    private
    void
    itteration(self, int done, int total)
    {
        if(self->_priv->progress_bar)
        {
            gtk_progress_bar_set_fraction(GTK_PROGRESS_BAR(self->_priv->progress_bar),(double)(done/(double)total));
            while(gtk_events_pending())
                gtk_main_iteration();
        }
    }

    private 
    void
    filename_changed(self, GtkEntry *entry)
    {
        const char *text = gtk_entry_get_text(entry);
        if(text[0] != '\0')
            gtk_widget_set_sensitive(self->_priv->button_export,TRUE);
        else
            gtk_widget_set_sensitive(self->_priv->button_export,FALSE);
    }
    private
    void
    complete_db_checked(self, GtkCheckButton *but)
    {
        gboolean value = gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(self->_priv->chk_cdb));
        gtk_widget_set_sensitive(self->_priv->cb_type,!value);
    }

    public
        G:Object *
    new_schema(StuffkeeperInterface *interface, StuffkeeperDataBackend *skdb,GtkListStore *store)
    {
        
        GtkWidget *dialog = NULL;
        Self *self = GET_NEW;
        GtkWidget *wid;
        GtkCellRenderer *renderer;
        gchar *directory = NULL;
	GError *error = NULL;

        self->_priv->skdb = skdb;
        self->_priv->interface = STUFFKEEPER_INTERFACE(interface);

        /**
         * Open the dialog 
         */
        self->_priv->xml = gtk_builder_new();
	gtk_builder_add_from_file(self->_priv->xml, PACKAGE_DATADIR"/export-html-full.ui",&error);
	if(error) {
		g_error("Failed to load export html ui description: %s\n", error->message);
		g_error_free(error);
		g_object_unref(self);
		return NULL;
	}

        dialog = (GtkWidget *)gtk_builder_get_object(self->_priv->xml, "export_html_full");

        directory = g_key_file_get_string(self->_priv->interface->config_file, "export-html", "export-directory",NULL);
        if(directory)
        {
            gtk_file_chooser_set_filename(GTK_FILE_CHOOSER(gtk_builder_get_object(self->_priv->xml, "file_chooser_button1")),directory);
            g_free(directory); 
            directory = NULL;
        }
       
        self->_priv->fc_template = (GtkWidget *)gtk_builder_get_object(self->_priv->xml, "fc_template");
        gtk_file_chooser_set_filename(GTK_FILE_CHOOSER(self->_priv->fc_template), PACKAGE_DATADIR PACKAGE_HTML_TEMPLATE_FULL);

        gtk_file_filter_add_pattern(self->_priv->ffilter, "*.template");
        gtk_file_filter_set_name(GTK_FILE_FILTER(self->_priv->ffilter), _("Export templates"));
        gtk_file_chooser_add_filter(GTK_FILE_CHOOSER(self->_priv->fc_template), self->_priv->ffilter);

        /* header */
        self->_priv->button_export = (GtkWidget *)gtk_builder_get_object(self->_priv->xml, "button_export2");
        self->_priv->progress_bar = (GtkWidget *)gtk_builder_get_object(self->_priv->xml, "progress_bar");
       self->_priv->chk_cdb = (GtkWidget *)gtk_builder_get_object(self->_priv->xml, "chk_cdb");
       self->_priv->chk_vis = (GtkWidget *)gtk_builder_get_object(self->_priv->xml, "chk_vis");
       wid = self->_priv->cb_type = (GtkWidget *)gtk_builder_get_object(self->_priv->xml, "cb_type1");
        gtk_combo_box_set_model(GTK_COMBO_BOX(wid), GTK_TREE_MODEL(store));
        gtk_combo_box_set_active(GTK_COMBO_BOX(wid), 0);
        renderer = gtk_cell_renderer_text_new();
        gtk_cell_layout_pack_start(GTK_CELL_LAYOUT(wid),renderer, TRUE);
        gtk_cell_layout_add_attribute(GTK_CELL_LAYOUT(wid),renderer, "text",1 );

        g_signal_connect_swapped(G_OBJECT(gtk_builder_get_object(self->_priv->xml, "event_box_header_html")), 
                "style-set",
                G_CALLBACK(self_style_set), 
                self);
        g_signal_connect_swapped(G_OBJECT(gtk_builder_get_object(self->_priv->xml, "filename_entry1")), 
                "changed",
                G_CALLBACK(self_filename_changed), 
                self);

        g_signal_connect_swapped(G_OBJECT(self->_priv->chk_cdb), "toggled", G_CALLBACK(self_complete_db_checked), self);
        self_filename_changed(self,GTK_ENTRY(gtk_builder_get_object(self->_priv->xml, "filename_entry1")));


        gtk_widget_show(GTK_WIDGET(dialog));
        /* */
        g_signal_connect_swapped(G_OBJECT(dialog), "response", G_CALLBACK(self_response2), self);
        return G_OBJECT(self); 

    }

    public
    G:Object *
    new(StuffkeeperInterface *interface, StuffkeeperDataBackend *skdb,Stuffkeeper:Data:Item  *item)
    {
	GError *error = NULL;
        GtkWidget *dialog = NULL;
        gchar *directory = NULL;
        Self *self = GET_NEW;
        self->_priv->skdb = skdb;
        self->_priv->interface = STUFFKEEPER_INTERFACE(interface);
        self->_priv->cur_item = item;
        /**
         * Open the dialog 
         */

        self->_priv->xml = gtk_builder_new();
	gtk_builder_add_from_file(self->_priv->xml, PACKAGE_DATADIR"/export-html-full.ui",&error);
	if(error) {
		g_error("Failed to load export html ui description: %s\n", error->message);
		g_error_free(error);
		g_object_unref(self);
		return NULL;
	}
        dialog = (GtkWidget *)gtk_builder_get_object(self->_priv->xml, "export_html_full");
        /* file chooser */
        directory = g_key_file_get_string(self->_priv->interface->config_file, "export-html", "export-directory",NULL);
        if(directory)
        {
            gtk_file_chooser_set_filename(GTK_FILE_CHOOSER(gtk_builder_get_object(self->_priv->xml, "file_chooser_button1")),directory);
            g_free(directory); 
            directory = NULL;
        }
        self->_priv->fc_template = (GtkWidget *)gtk_builder_get_object(self->_priv->xml, "fc_template");
        gtk_file_chooser_set_filename(GTK_FILE_CHOOSER(self->_priv->fc_template), PACKAGE_DATADIR PACKAGE_HTML_TEMPLATE);
        gtk_file_filter_add_pattern(self->_priv->ffilter, "*.template");
        gtk_file_filter_set_name(GTK_FILE_FILTER(self->_priv->ffilter), _("Export templates"));
        gtk_file_chooser_add_filter(GTK_FILE_CHOOSER(self->_priv->fc_template), self->_priv->ffilter);

        /* */
        self->_priv->button_export = self->_priv->cb_type = (GtkWidget *)gtk_builder_get_object(self->_priv->xml, "button_export2");
        self->_priv->progress_bar = (GtkWidget *)gtk_builder_get_object(self->_priv->xml, "progress_bar");
        self->_priv->cb_type = (GtkWidget *)gtk_builder_get_object(self->_priv->xml, "cb_type1");
        self->_priv->chk_cdb = (GtkWidget *)gtk_builder_get_object(self->_priv->xml, "chk_cdb");
        self->_priv->chk_vis = (GtkWidget *)gtk_builder_get_object(self->_priv->xml, "chk_vis");
        gtk_widget_hide(self->_priv->cb_type);
        gtk_widget_hide((GtkWidget *)gtk_builder_get_object(self->_priv->xml, "label_type"));

        gtk_widget_hide((GtkWidget *)gtk_builder_get_object(self->_priv->xml, "label_cdb"));
        gtk_widget_hide((GtkWidget *)gtk_builder_get_object(self->_priv->xml, "chk_cdb"));
        gtk_widget_hide((GtkWidget *)gtk_builder_get_object(self->_priv->xml, "label_vis"));
        gtk_widget_hide((GtkWidget *)gtk_builder_get_object(self->_priv->xml, "chk_vis"));

        /* header */
        g_signal_connect_swapped(G_OBJECT(gtk_builder_get_object(self->_priv->xml, "event_box_header_html")), 
                "style-set",
                G_CALLBACK(self_style_set), 
                self);
        g_signal_connect_swapped(G_OBJECT(gtk_builder_get_object(self->_priv->xml, "filename_entry1")), 
                "changed",
                G_CALLBACK(self_filename_changed), 
                self);
        g_signal_connect_swapped(G_OBJECT(self->_priv->chk_cdb), "toggled", G_CALLBACK(self_complete_db_checked), self);
        self_filename_changed(self,GTK_ENTRY(gtk_builder_get_object(self->_priv->xml, "filename_entry1")));

        gtk_widget_show(GTK_WIDGET(dialog));
        /* */
        g_signal_connect_swapped(G_OBJECT(dialog), "response", G_CALLBACK(self_response2), self);
        return G_OBJECT(self); 
    }

    /**
     * Response
     */
    private 
    void
    response2(self, int response, GtkWidget *dialog )
    {
        switch(response)
        {
            case 1:
                {
                    GtkTreeIter iter;
                    int have_schema = 0;
                    GtkTreeModel *model = gtk_combo_box_get_model(GTK_COMBO_BOX(self->_priv->cb_type));
                    have_schema = gtk_combo_box_get_active_iter(GTK_COMBO_BOX(self->_priv->cb_type),&iter);
                    {
                        const gchar *filename = gtk_entry_get_text(GTK_ENTRY(gtk_builder_get_object(self->_priv->xml,"filename_entry1")));
                        gchar *directory = gtk_file_chooser_get_filename(
                                    GTK_FILE_CHOOSER(gtk_builder_get_object(self->_priv->xml,"file_chooser_button1")));
                        gchar *template = gtk_file_chooser_get_filename(GTK_FILE_CHOOSER(self->_priv->fc_template));
                        StuffkeeperDataSchema *schema = NULL;
                        g_key_file_set_string(self->_priv->interface->config_file, "export-html", "export-directory",directory);

                        if(have_schema && !gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(self->_priv->chk_cdb)))
                        {
                            gtk_tree_model_get(model, &iter,3, &schema, -1); 
                            self->_priv->cur_schema = schema;
                        }

                        if(filename){
                            gchar *path = g_build_path(G_DIR_SEPARATOR_S, directory, filename, NULL);
                            gchar *image_path = g_build_path(G_DIR_SEPARATOR_S, directory, "images", NULL);
                            g_mkdir(image_path, 0755);
                            self->_priv->image_path = image_path;
                            gtk_widget_set_sensitive(dialog, FALSE);
                            gtk_widget_show(self->_priv->progress_bar);
                            self_dump_to_file(self,template,path );

                            self->_priv->image_path = NULL;
                            g_free(image_path);
                            g_free(path);
                        }
                        g_free(template);
                        g_free(directory);

                    }
                }
            default:
                break;
        }
        gtk_widget_destroy(GTK_WIDGET(dialog));
        g_object_unref(self);
    }

    /**
     * header 
     */

    private
    void
    style_set(self, GtkStyle *style, GtkWidget *wid)
    {
        g_signal_handlers_block_by_func(G_OBJECT(wid), self_style_set,self);
        gtk_widget_modify_bg(wid,
                GTK_STATE_NORMAL, 
                &((wid)->style->bg[GTK_STATE_SELECTED]));
        gtk_widget_modify_text((GtkWidget *)gtk_builder_get_object(self->_priv->xml, "label_title_html"), 
                GTK_STATE_NORMAL, 
                &((wid)->style->text[GTK_STATE_SELECTED]));
        gtk_widget_modify_fg((GtkWidget *)gtk_builder_get_object(self->_priv->xml, "label_title_html"), 
                GTK_STATE_NORMAL, 
                &((wid)->style->fg[GTK_STATE_SELECTED]));
        g_signal_handlers_unblock_by_func(G_OBJECT(wid), self_style_set,self);
    }
    /**
     * Handler to free data when object is destroyed
     */
    override (G:Object)
        void
        finalize (G:Object *obj)
        {
            //Self *self = SELF(obj);
            PARENT_HANDLER(obj);
        }

    /**
     * actual work is done here
     */
    private 
        gchar *
    CSV_strescape(const gchar *string)
    {
        gchar *retv= NULL;
        int length=0,i,j;
        /* check string != NULL */
        if(string == NULL) {
            return NULL;
        }
        /* Count string length after escaping */
        for(i=0;string && string[i];i++)
        {
            if(string[i] == '"')
                length++;
            length++;    
        }
        /* Alloc space */
        retv = g_malloc0((length+1)*sizeof(char*));
        j=0;
        for(i=0;string[i];i++) {
            retv[j]=string[i];
            if(string[i] == '"') {
                j++;
                retv[j]='"';
            }
            j++;
        }
        return retv;
    }

    private
    char *escape(self, char *buffer)
    {
        char *retv = NULL;
        if(self->_priv->etype == ESCAPE_HTML)
        {
            retv = g_markup_escape_text(buffer, -1); 

        }else if(self->_priv->etype == ESCAPE_CSV){
            retv = self_CSV_strescape(buffer);
        }else{ // ESCAPE_NONE
            retv = g_strdup(buffer);
        }
        return retv;
    }
    private 
    int  
    printout(self,char *buffer,char * temp, FILE *fp_out)
    {
        int i;
        int found = 0;
        for(i=0; buffer[i] != '\0';i++)
        { 
            if(temp)
            {
                if(buffer[i]  == '%')
                {
                    gchar *esc = self_escape(self, temp);
                    found = 1;

                    fputs(esc, fp_out);
                    g_free(esc);

                }
                else if(buffer[i] == '{') {
                    int a;
                    int j = i+1;
                    int depth = 0;
                    while (buffer[j] || depth) {
                        if (buffer[j]=='}')
                        {
                            if (!depth) break;
                            depth--;
                        }
                        else if (buffer[j] == '{') depth++;
                        j++;
                    }
                    // now i points to open { and  to matching close }
                    if (i != j) // ensures buffer[j] doesn't segfault
                    {
                        buffer[j] = '\0';
                        self_parse_field_buffer(self, buffer+i+1, fp_out);
                        i=j;
                    }
                }
                else
                {
                    fputc(buffer[i], fp_out);
                }
            }
        }
        return found;
    }
    private 
    void 
    parse_field(self,FILE *fp_in, FILE *fp_out)
    {
        int a;
        int i= 0;
        int depth = 0;
        char buffer[1024];


        a = fgetc(fp_in);
        while(a != '}' || depth) {
            buffer[i] = a;
            i++;
            if(a == '}') depth--;
            else if(a == '{') depth++;
            a = fgetc(fp_in);
        };
        buffer[i] = '\0';
        self_parse_field_buffer(self, buffer, fp_out);
    }
    private 
    void 
    parse_field_buffer(self,char* buffer, FILE *fp_out)
    {
        if(strncasecmp(buffer, "escape:csv", 10) == 0)
        {
            self->_priv->etype = ESCAPE_CSV;
        }
        else if(strncasecmp(buffer, "escape:html", 11) == 0)
        {
            self->_priv->etype = ESCAPE_HTML;
        }
        else if(strncasecmp(buffer, "escape:none", 11) == 0)
        {
            self->_priv->etype = ESCAPE_NONE;
        }
        else if(strncasecmp(buffer,"schema:title", 12) == 0 )
        {
            gchar *temp = NULL;
            if(self->_priv->cur_schema)
                temp = stuffkeeper_data_schema_get_title(self->_priv->cur_schema);
            self_printout(self,&buffer[13], temp, fp_out);
            if(temp)
                g_free(temp);
        }
        else if(strncasecmp(buffer,"schema:id",9) == 0)
        {
            gchar *temp = NULL;
            if(self->_priv->cur_schema)
            {
                int id = stuffkeeper_data_schema_get_id(self->_priv->cur_schema); 
                temp = g_strdup_printf("%i", id);
            }
            self_printout(self,&buffer[10], temp, fp_out);
            if(temp)
                g_free(temp);
        }  
        else if(strncasecmp(buffer,"item:title", 10) == 0 )
        {
            gchar *temp = NULL;
            if(self->_priv->cur_item)
                temp = stuffkeeper_data_item_get_title(self->_priv->cur_item);
            self_printout(self,&buffer[11], temp, fp_out);
            if(temp)
                g_free(temp);
        }
        else if(strncasecmp(buffer,"item:id",7) == 0)
        {
            gchar *temp = NULL;
            if(self->_priv->cur_item)
            {
                int id = stuffkeeper_data_item_get_id(self->_priv->cur_item); 
                temp = g_strdup_printf("%i", id);
            }
            self_printout(self,&buffer[8], temp, fp_out);
            if(temp)
                g_free(temp);
        }       
        else if (strncasecmp(buffer,"item:tags", 9) == 0)
        {
            if(self->_priv->cur_item)
            {
                int found = 1;
                GList *node, *list = stuffkeeper_data_item_get_tags(self->_priv->cur_item);

                for(node = list;node && found ;node = g_list_next(node))
                {
                    StuffkeeperDataTag *tag = node->data;
                    gchar *title = stuffkeeper_data_tag_get_title(tag);
                    found = self_printout(self,&buffer[10],title,fp_out);
                    if(title)
                        g_free(title);
                }
                if(list)
                    g_list_free(list);
            }
        }

        else  if(self->_priv->cur_field)
        {
            if(strncmp(buffer,"field",5 ) == 0)
            {
                StuffkeeperDataSchema *schema = stuffkeeper_data_item_get_schema(self->_priv->cur_item);
                FieldType type = stuffkeeper_data_schema_get_field_type(schema, self->_priv->cur_field); 
                int item_type = 0; 
                int i;
                int found = 0;
                for(item_type=0; item_type < FIELD_TYPE_NUM_FIELDS && 
                    strncasecmp(&buffer[6],FieldNames[item_type],strlen(FieldNames[item_type])) != 0;item_type++);
                if(item_type >= FIELD_TYPE_NUM_FIELDS)
                {
                    /** */
                    if(strncasecmp(&buffer[6],"name", 4) == 0)
                    {
                        if(type <= FIELD_TYPE_EXPANDER)
                        {
                            StuffkeeperDataSchema *schema = stuffkeeper_data_item_get_schema(self->_priv->cur_item);
                            gchar *temp = stuffkeeper_data_schema_get_field_name(schema, self->_priv->cur_field);
                            self_printout(self,&buffer[10],temp,fp_out);
                            if(temp)
                                g_free(temp);
                        }
                    }
                    else
                    {
                        printf("type unknown\n");

                    }
                    return;
                }
                else if (!( item_type == type || (item_type == FIELD_TYPE_END_EXPANDER && type == FIELD_TYPE_END)))
                {
                    /* need a way to "skip" the new line */ 
                    return;
                }
                

                i=strlen(FieldNames[item_type])+6;
                {

                    if(type == FIELD_TYPE_LIST)
                    {
                        gsize len = 0;
                        char **retv = stuffkeeper_data_item_get_list(self->_priv->cur_item, self->_priv->cur_field,&len);
                        int found = 1;
                        int k;
                        int prev_i = i;
                        for(k=0; k < len && found;k++)
                        {
                            found = self_printout(self,&buffer[i], retv[k], fp_out);
                            if(found)
                                i = prev_i;
                        }
                        if(retv)
                            g_strfreev(retv);
                    }
                    else if (type == FIELD_TYPE_IMAGE)
                    {
                        gchar *temp = stuffkeeper_data_item_get_string(self->_priv->cur_item, self->_priv->cur_field);
                        for(; buffer[i] != '\0';i++)
                        { 
                            if(temp)
                            {
                                if(buffer[i]  == '%')
                                {
                                    gchar *esc = self_escape(self, temp);//g_markup_escape_text(temp, -1); 
                                    found = 1;
                                    fputs("images/", fp_out);
                                    if(self->_priv->image_path)
                                    {
                                        gsize len = 0;
                                        gchar *content  = NULL;
                                        gchar *spath = g_build_path(G_DIR_SEPARATOR_S, 
                                            stuffkeeper_data_backend_get_path(
                                            STUFFKEEPER_DATA_BACKEND(stuffkeeper_data_item_get_backend(self->_priv->cur_item))),
                                            "images",temp,NULL);
                                        gchar *dpath = g_build_path(G_DIR_SEPARATOR_S,self->_priv->image_path ,temp,NULL);
                                        if(g_file_get_contents(spath, &content, &len, NULL))
                                        {
                                            g_file_set_contents(dpath, content, len, NULL);
                                            g_free(content);
                                        }
                                        g_free(spath);
                                        g_free(dpath);
                                    }

                                    fputs(esc,fp_out);
                                    g_free(esc);

                                }
                                else 
                                {
                                    fputc(buffer[i], fp_out);
                                }

                            }
                        }
                        if(temp)
                            g_free(temp);
                    }
                    else if (type == FIELD_TYPE_BOOLEAN || type == FIELD_TYPE_EXPANDER)
                    {
                        int val = stuffkeeper_data_item_get_integer(self->_priv->cur_item, self->_priv->cur_field);
                        for(; buffer[i] != '\0';i++)
                        { 
                            if(buffer[i]  == '%')
                            {
                                int end = i+1;
                                int bbreak = i+1;
                                int j;
                                for(;buffer[end] != '\0' && buffer[end] != '%'; end++) 
                                {
                                    /* if we see an escape char, skip the next one, cannot be a break */
                                    if( buffer[end-1] != '\\' && buffer[end] == ':') bbreak = end;
                                }
                                if(val) {
                                    for(j=i+1;j<bbreak;j++) fputc(buffer[j],fp_out);
                                } else {
                                    for(j=bbreak+1;j<end;j++) fputc(buffer[j],fp_out);
                                }

                                i = end;
                                if(buffer[i] == '\0') break;
                            }
                            else 
                            {
                                fputc(buffer[i], fp_out);
                            }
                        }
                    }else if (type == FIELD_TYPE_END || type == FIELD_TYPE_VPACKING || type == FIELD_TYPE_HPACKING)
                    {
                        self_printout(self,&buffer[i],"",fp_out);
                    } else if (type == FIELD_TYPE_TEXT) {
                                gchar *temp = stuffkeeper_data_item_get_string(self->_priv->cur_item, self->_priv->cur_field);
                                if(temp) {
                                    self_printout(self,&buffer[i],temp?temp:"",fp_out);
                                }
                                if(temp)
                                    g_free(temp);
                    } else {
                        gchar *temp = stuffkeeper_data_item_get_string(self->_priv->cur_item, self->_priv->cur_field);
                        self_printout(self,&buffer[i],(temp)?temp:"",fp_out);
                        if(temp)
                            g_free(temp);
                    }
                }
                
            }

        }
    }
    private
    void 
    parse_file(self,FILE *fp_in, FILE *fp_out)
    {
        int a;

        while((a = fgetc(fp_in)) != EOF)
        {
            if(a == '\\')
            {
                a = fgetc(fp_in);
                fputc(a,fp_out);
            } 
            else if(a == '{')
            {
                self_parse_field(self,fp_in, fp_out);
            }
            else if (a == '[')
            {
                a = fgetc(fp_in);
                /**
                 * Iterate through all the fields in the current item
                 */
                if(a == 'i' && self->_priv->cur_item)
                {

                    gsize length=0;
                    char **retv = stuffkeeper_data_schema_get_fields(stuffkeeper_data_item_get_schema(self->_priv->cur_item),&length);
                    long point = ftell(fp_in);
                    int i;
                    for(i=0;i<length;i++)
                    {
                        //StuffkeeperDataSchema *schema = stuffkeeper_data_item_get_schema(self->_priv->cur_item);
                        //FieldType type = stuffkeeper_data_schema_get_field_type(schema, retv[i]); 
                       // if(type < FIELD_TYPE_EXPANDER)
                        {
                            fseek(fp_in, point, SEEK_SET);
                            self->_priv->cur_field = retv[i];
                            self_parse_file(self, fp_in, fp_out);
                        }
                    }
                    g_strfreev(retv);

                    self->_priv->cur_field = NULL;
                    
                }
                /**
                 * Iterate through all the items in the current schema 
                 */
                else if(a == 's' && self->_priv->cur_item == NULL && self->_priv->cur_schema != NULL)
                {

                    GList *list = stuffkeeper_data_schema_get_items(self->_priv->cur_schema);
                    if(list)
                    {
                        long point = ftell(fp_in);
                        GList *node;
                        int length = g_list_length(list);
                        int pr = 0;
                        for(node = g_list_first(list);node ; node = g_list_next(node))
                        {
                            fseek(fp_in, point, SEEK_SET);
                            self->_priv->cur_item = node->data;
                            if(gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(self->_priv->chk_vis)) && 
                               !stuffkeeper_interface_item_is_visible(self->_priv->interface, self->_priv->cur_item))
                            {
                                int i = 1;
                                char last = 0;
                                do{
                                    a = fgetc(fp_in);
                                    if(a == ']' && last != '\\') i--;
                                    if(a == '[' && last != '\\') i++;

                                    last = a;
                                }while(a != EOF && i); 
                            }
                            else 
                            {
                                self_parse_file(self, fp_in, fp_out);
                            }
                            self->_priv->cur_item = NULL;
                            self_itteration(self,pr,length);
                            pr++;
                        }
                        
                    }
                }
                /**
                 * Iterate through all the schemas in the current backend 
                 */
                else if(a == 'b' && self->_priv->cur_item == NULL && self->_priv->cur_schema == NULL)
                {
                    GList *list = stuffkeeper_data_backend_get_schemas(self->_priv->skdb);
                    if(list)
                    {
                        long point = ftell(fp_in);
                        GList *node;
                        for(node = g_list_first(list);node ; node = g_list_next(node))
                        {
                            fseek(fp_in, point, SEEK_SET);
                            self->_priv->cur_schema = node->data;
                            self_parse_file(self, fp_in, fp_out);
                            self->_priv->cur_schema = NULL;
                        }

                        g_list_free(list);
                    }
                }
                else
                {
                    self_parse_file(self, fp_in, fp_out);
                }
            }
            else if (a == ']')
            {
                return;
            }
            else
            {
                fputc(a,fp_out);
            }
        }
    }
    private
    void
    dump_to_file(self,const gchar *template,const gchar *path)
    {
        FILE *fp_in = fopen(template,"r");
        FILE *fp_out = fopen(path,"w");

        
        self_parse_file(self, fp_in, fp_out);

        fclose(fp_in);
        fflush(fp_out);
        fclose(fp_out);
    }
}
